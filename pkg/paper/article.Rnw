\documentclass{article}
\setlength{\parskip}{.1in}
\setlength{\parindent}{0in}
\usepackage{graphicx}
\begin{document}

This article aims to set out the technical information that is
necessary for producing precise specifications
of color within a software environment.  




This article is aimed at the developers of software for
statistical graphics, so it is not an exhaustive discussion of
color.  However, sufficient background material is included 
to allow an understanding of the terms and concepts used in this
article.  

It is hoped that the information will also be generally useful
for people working with colors as data values, including 
the generation of sets of colors for statistical plots.

\section{What's wrong with RGB?}

The most common way to specify colors in a software system
is as an RGB triplet.  In this system, a color is specified 
as an amount of red, an amount of green, and an amount of blue,
where the amounts range from 0 (none) to 1 (as much as possible).
In some systems, the amounts are specified in the range 0 to 255
(because it is common to use 8 bits to store each color component
and $2^8 = 256$), and it is not uncommon to write values within this 
range in hexadecimal notation so that values range from \#00 to
\#FF (F has the decimal value 15 and the second digit 
specifies a multiple of
16, so $15*16 + 15 = 255$).

For example, in HTML, the color red is specified as \#FF0000.

\subsection{RGB is unintuitive}

This system for specifying color has some appeal.  It appears 
straightforward to specify simple colors:  red is all red and no green
or blue, green and blue are similar, white is all three colors, and black is
none.

However, intuition rapidly runs out of steam in this system.  What is the
RGB specification for the color brown?  What about pink or orange?

It is possible to create color palettes for the RGB system and 
to select colors by eye, but this is not appropriate for situations
where it is necessary to select sets of colors.  For example, 
it might be useful to represent an ordinal variable as different
shades of brown.  Given the RGB specification for brown, how 
can we specify lighter shades of brown?  

\subsection{RGB is not perceptually uniform}

An intuitive answer to the previous question would be to linearly
interpolate between the RGB values for brown and the RGB values
for white, but this only serves to highlight another problem with the
RGB system, which is that it is not a \emph{perceptually uniform} system.
This means that a unit step within RGB space does not produce a 
constant perceptual change in color.
Figure \ref{figure:shadesofbrown} shows the linear interpolation in
RGB space compared to a similar interpolation in a perceptually uniform space.

<<echo=FALSE>>=
library("grid")
library("colorspace")
@

<<rgbnotuniform, echo=FALSE, fig=TRUE, height=3, include=FALSE>>=
# grid.newpage()

# RGB
N <- 100

col <- "brown"
col.rgb <- as.vector(col2rgb(col))
col.lch <- as.vector(coords(as(RGB(col.rgb[1]/255, col.rgb[2]/255, col.rgb[3]/255), "polarLAB")))

fill.rgb <- rgb(seq(col.rgb[1], 255, length=N),
                seq(col.rgb[2], 255, length=N),
                seq(col.rgb[3], 255, length=N), max=255)
fill.lch <- coords(as(polarLAB(seq(col.lch[1], 99, length=N),
                               seq(col.lch[2], 0, length=N),
                                   col.lch[3]), "RGB"))
fill.lch <- rgb(fill.lch[,1], fill.lch[,2], fill.lch[,3]) ## we do not even get this behaviour with
                                                          ## hex(..., gamma = 1)
							  ## only for the inverse there is
							  ## hex2RGB(..., gamma = NA)

grid.rect(x=1:N/N, width=1/N, y=.75, height=0.4,
          just=c("right", "centre"),
          gp=gpar(col=NA,
          fill=fill.rgb))

grid.rect(x=1:N/N, width=1/N, y=0.25, height=0.4,
          just=c("right", "centre"),
          gp=gpar(col=NA,
          fill=fill.lch))

@ 
\begin{figure}
\includegraphics[width=\textwidth]{article-rgbnotuniform}
\caption{\label{figure:shadesofbrown}A linear interpolation
from brown to white in RGB space (top) and a perceptually uniform
 space (bottom).  Equal-sized horizontal steps result in non-equal-sized
perceptual changes in color in the RGB interpolation (the perceived 
color changes rapidly at the left end and more slowly at the 
right end).}
\end{figure}

\subsection{RGB is device-dependent}

A further problem with RGB color specifications is that it is unclear
what ``red'', ``green'', and ``blue'' actually mean.

The color of light is determined by its wave-length. A typical human can 
perceive light in the range 400nm to 700nm.  A coherent
light source (e.g., a laser) at the 400nm range appears blue and a coherent
light source at the 700nm range appears red.  Most light sources
(e.g., light bulbs, or the Sun)
are not coherent and emit light at many different wave lengths.
A light source can be characterised by its spectral power distribution (SPD),
which is how much of each wavelength of light the light source emits.

On an LCD computer screen, 
each pixel is made up from three sub-pixels, which are
colored red, green, and blue.  A full red color is produced by emitting 
light at full power from just the red sub-pixel.  However, this red is not
a single wavelength.
Figure \ref{figure:SPD} shows the SPDs might look like 
for the red, green, and blue
sub-pixels of a typical computer monitor.

% source: http://white.stanford.edu/~brian/scielab/scielab1-1-1/

<<spd, echo=FALSE, fig=TRUE, include=FALSE>>=
SPD <- read.table("displaySPD.txt", skip=5,
    col.names=c("r", "g", "b"))
wavelengths <- scan("wavelength.txt", what=numeric(), skip=5)

plot(wavelengths, SPD$r, type="l", col="red", lwd=3,
     ylab="", xlab="wavelength", axes=FALSE)
lines(wavelengths, SPD$g, type="l", col="green", lwd=3)
lines(wavelengths, SPD$b, type="l", col="blue", lwd=3)
box()
axis(1)


@ 
\begin{figure}
\includegraphics[width=\textwidth]{article-spd}
\caption{\label{figure:SPD}SPD for red, green, and blue on
a typical computer monitor.}
\end{figure}

In order to know what light is emitted in response to an RGB color 
specification like \#FF0000, it is necessary to know the SPDs for
the device that will be producing the light.
This can vary considerably between different devices such as computer
monitors and data projectors (beamers).

For less-than-full red, the SPD stays the same shape and just
less light is emitted (the result is a darker color).
However, there is a further complication because the decrease is not linear.
Figure \ref{figure:gamma} shows the curves relating the amount of
light emitted as a function of the sizes of the RGB components
for a typical computer monitor.
These are commonly referred to as \emph{display gamma curves} because
the curve is, for convenience, approximated by a power function
with a single exponent called gamma.  Although each curve is slightly 
different, it is common to use a single gamma value for a
particular device.  Figure \ref{figure:gamma} shows the power curve
for the standard gamma value of 2.2 as a dotted line.

% source: http://white.stanford.edu/~brian/scielab/scielab1-1-1/

<<gamma, echo=FALSE, fig=TRUE, include=FALSE>>=
gamma <- read.table("gamma.txt", skip=5)

plot(seq(0, 1, length=dim(gamma)[1]), gamma[,1],
     type="l", col="red", lwd=3,
     xlab="amount of primary", ylab="intensity")
lines(seq(0, 1, length=dim(gamma)[1]), gamma[,2],
     type="l", col="green", lwd=3)
lines(seq(0, 1, length=dim(gamma)[1]), gamma[,3],
     type="l", col="blue", lwd=3)
lines(seq(0, 1, length=dim(gamma)[1]),
     seq(0, 1, length=dim(gamma)[1])^2.2,
     type="l", lty="dotted", lwd=3)

@ 
\begin{figure}
\includegraphics[width=\textwidth]{article-gamma}
\caption{\label{figure:gamma}Gamma curves for red, green, and blue on
a typical computer monitor.}
\end{figure}

In order to know how much light is emitted in response
to an RGB color specification, for example, \#990000, it is necessary
to know the gamma for the device that will be producing the light. 
This can also vary considerably between different devices such as computer
monitors and data projectors (beamers).

In summary, we have what we will call the \emph{RGB uncertainty principle}:
in RGB space, you don't know where you are, 
you don't know how fast you are moving, and 
you don't know which way to go.

\textit{Add mention of gamut as well;  RGB principle adds ... and 
there are places that you just can't get to!}

It is simply not adequate for a software system to only allow 
the user to specify colors in an RGB system.

\subsection{Why RGB?}

If RGB has all of these problems, do we need to deal with the
RGB colorspace at all?

Yes. The RGB colorspace is still important because it is the way that
colors need to be specified for producing graphics output on 
computer monitors.
The point is that RGB space may be where you need to end up, but it is
not a good place to start.

\section{CIE colorspaces}

One thing that has not been mentioned so far is the problem that,
even if we could give a description of a color that everyone
would agree upon (e.g., a spectral power distribution), 
we cannot guarantee that
every person would experience the same color, because perception
of color is a subjective task.  This is the starting point for
a discussion of alternative color spaces to RGB.

Given that no two people can expect to have exactly the same
subjective response to the same physical stimulus, we must do the
next best thing and target a \emph{standard observer}.
This is the approach taken by the
International Commission on Illumination---referred to 
as the CIE, after its French title,
Commission Internationale de l'Eclairage.

\subsection{Device-independence:  CIEXYZ}

Based on experiments with human subjects, the CIE developed the
CIEXYZ colorspace.  In this colorspace, 
any SPD, that is any color, can be mapped to a unique triplet
of XYZ values, which represent the standard observer's perception of
the color.  

This is a device-independent colorspace.  The specification of a
color is absolute in the sense that it corresponds to a unique
physical stimulus and there is no ambiguity in terms of 
what the standard observer's response to the color should be.

This is a good first step, but CIEXYZ does not give us 
everything we need.  For example, if we want to specify a
simple color, such as ``red'', which three values should we use?

In this colorspace, $Y$ corresponds roughly to how bright a color
appears, but the $X$ and $Z$ components have no simple intuitive 
meaning.  Furthermore, unit steps within this colorspace are
not perceptually equal, so generating a palette of colors cannot
proceed in a rational manner.  This leads us on to consideration 
to other colorspaces that are derived from CIEXYZ.

\subsection{Perceptual uniformity:  CIELUV}

The CIELUV colorspace
 is a transformation of CIEXYZ in a 
reasonably successful attempt to achieve perceptual uniformity.
Again, any color can be specified as a triplet of values,
with the advantage that a unit step in any direction corresponds to a 
fixed perceptual change in color.  However, the problem of 
intuitively specifying colors remains.

\subsection{Intuitive color choice:  CIELCH}

The CIELCH colorspace is a re-expression of CIELUV using
polar coordinates for the U-V plane.  In this colorspace,
any color may be described by a triplet of values, a unit
step is perceptually uniform throughout the colorspace, 
and the three dimensions of the colorspace have intuitive 
interpretations:  

\begin{description}
\item[$L$] corresponds to the luminance or
brightness of the color.  This is normalised to
the range 0 to 100.
\item[$C$] corresponds to the chroma (colorfulness, or purity) of the color.
Lowering the chroma produces a color that is closer to grey.
The range of this parameter depends on the luminance and hue.  For example,
the range of possible chromas is much smaller for 
very dark colors (low luminance);  in the extreme case of luminance 0,
which corresponds to black, chroma can only take the value 0.
\item[$H$] corresponds to the hue of the color.
This value can range from 0 to 360, with 0 corresponding to red, 
120 to green, 240 to blue, and so on.
\end{description}

This then is a colorspace in which it makes sense to specify colors.
The specification does not depend on a particular device, selection
of colors is intuitive, and color palettes can be obtained in a
rational fashion.

Only one problem remains:  we can conveniently specify a color
using CIELCH, but in order to render that color we need a
specification that a rendering device understands.
For example, in order to display a color on screen,
we need to be able to convert a CIELCH color into an RGB
color specification.

\section{Colorspace conversions}

The conversion from CIELCH to RGB consists of a series
of steps.  We start with conversions between the various
CIE colorspaces.

\subsection{LCH to LUV}

This is simply a conversion from the polar expression to
cartesian coordinates in the U-V plane.  

$$U = C \cos(H)$$

$$V = C \sin(H)$$

The L component 
is unchanged.

\subsection{LUV to XYZ}

This conversion is non-linear, reflecting the non-linear
nature of human color perception.  It is also performed in 
several stages, reflecting the historical development of the
CIELUV colorspace, which builds upon a couple of other
earlier transformations of the CIEXYZ colorspace.

The conversion also depends on the concept of a \emph{white point}.
For now, we can just think of the white point as representing the
viewing conditions under which the colour is to be
shown.\footnote{It is relatively straightforward 
to think about a white point in terms of a printed image.  In that case,
the white point is an area of the image that perfectly reflects the
ambient lighting conditions.  In other words, the white point
corresponds to whatever illumination is being used to view the image.}
The white point is important because the perception of colors
is dependent on the viewing conditions.  For example, an image
will look different when viewed under a pink light instead
of a white light.  More subtly, 
an image will look different when viewed outside in normal sunlight compared
to inside with fluorescent lighting.

The white point is expressed as CIEXYZ tristimulus values.
There are a number of established white points used in practice,
with the most popular being a representation of normal daylight,
called $D65$:

% Source:  Ross's code, confirmed by published article

$$\begin{array}{c}X_r = 95.047\\
                  Y_r = 100.000\\
                  Z_r = 108.883
  \end{array}$$

\textit{Put more of these in an appendix?}

% Source:  http://brucelindbloom.com/

The value of $Y$ is relatively straightforward to calculate from the
value of $L$:

$$Y = \left\{\begin{array}{l l}((L + 16)/116)^3 & \quad L > 7.999592 \\
                               L/903.3 & \quad L \leq 7.999592 \\
             \end{array} 
      \right.$$

Before we can calculate $X$ and $Z$, we need to calculate several 
intermediate values:

$$\begin{array}{l}u_r = \frac{4X_r}{X_r + 15Y_r + 3Z_r}\\
                  v_r = \frac{9Y_r}{X_r + 15Y_r + 3Z_r}\\
  \end{array}$$

$$\begin{array}{l}a = \frac{1}{3}\left(\frac{52L}{U + 13Lu_r} - 1\right)\\
                  b = -5Y\\
                  c = -\frac{1}{3}\\
                  d = Y\left(\frac{39L}{V + 13Lv_r} - 5\right)\\
  \end{array}$$

\textit{Check me: should those be straight 
U and V, or ``normalised'' versions?}

The values of $X$ and $Y$ are now calculated from these values:

$$X = \frac{d - b}{a - c}$$

$$Z = Xa + b$$

\subsection{XYZ to RGB}

The first point to recall is that a CIE color specification
is device independent;  it corresponds to an unambiguous 
perceptual response (for the standard observer).  On the
other hand, an RGB color specification is quite ambiguous,
depending on the physical characteristics of the screen
pixels.

This means that the conversion from CIE colorspace to RGB
should, ideally, occur for a particular device, \emph{and}
it can only occur then if the characteristics of that
device, such as the SPDs of the screen pixels, are known.

It is possible to achieve this level of detail by measuring
the physical characteristics of a device, but for a general-purpose
system it is sensible to use a default based on industry standards.

\textit{Fixme:  need to deinfe ``primaries'' earlier.}

One such standard is the ITU-R BT.709-2 Recommendation (for
high-definition television), which specifies CIEXYZ values
for the $R$, $G$, and $B$ primaries of a display device.

\textit{Fixme:  need to deinfe ``channels'' earlier.}

The second point is that we again need a white point in
order to perform the conversion.
For computer monitors, the white point is what you get when you
combine red, green, and blue channels at full power.  This is not as
unambiguous as it sounds because it depends both on the SPDs 
of the red, green, and blue channels \emph{and} on the relative 
powerfulness of the maximum for each channel.  In effect, it is 
possible for two monitors to have very different white points, 
with one, for example, much ``bluer'' than another if the maximum
of the blue channel is set higher.

Typically, the white point for a computer monitor is set by the
manufacturer and the common setting used these days is 
D65 (as described in the previous section).

Using the 709-2 Recommendation primaries and a D65 white point,
the conversions are:

% source:  Poynton's Color FAQ

\textit{Check me again:  are we dealing with tristimulus values
or chromaticities?  Ross's code says chromaticities, but Bruce
Lindbloom's site seems to allow working in tristimulus values.}

$$R = 3.240479X - 1.537150Y - 0.498535Z$$

$$G = -0.969256X + 1.875992Y + 0.041556Z$$

$$B = 0.055648X - 0.204043Y + 1.057311Z$$

\textit{Discuss calculation of transforms from RGB primaries that
are not Rec. 709?}

\textit{Need to talk about clipping to the RGB gamut}

\section{Gamma correction}

\section{sRGB}

The sRGB colorspace consists of colour specifications as 
RGB tristimulus values, \emph{plus} fixed CIE specifications of
the $R$, $G$, and $B$ primaries, \emph{plus} a fixed white point, 
\emph{plus} a fixed gamma.
This is in effect a device-independent colorspace because it
dictates the characteristics of a display device (and the viewing
conditions).

\section{Other color spaces}

CMYK for print.  Simple-minded RGB-CMY is easy, but wrong.
Sophisticated RGB-CMY is damn nigh impossible.

\end{document}
